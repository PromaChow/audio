name: Unit-tests on MacOS M1 CPU
on:
  push:
    branches:
      - main

jobs:
  build:
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Start Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: start-measurement
      - id: display-measurement
        name: Display Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: display-results
      - name: Save Total Energy Consumption Data
        run: echo '${{ steps.final-measurement.outputs.data-total-json }}' > total_energy_consumption.json
      - name: Upload Energy Consumption Artifact
        uses: actions/upload-artifact@v4
        with:
          name: total-energy-consumption
          path: total_energy_consumption.json
    strategy:
      fail-fast: false
      matrix:
        ffmpeg-version:
          - '7'
        python-version:
          - '3.11'
    uses: pytorch/test-infra/.github/workflows/macos_job.yml@main
    with:
      repository: pytorch/audio
      runner: macos-m1-stable
      script: "echo '::group::Setup Environment Variables'\n# Mark Build Directory\
        \ Safe\ngit config --global --add safe.directory /__w/audio/audio\n\n# Set\
        \ up Environment Variables\nexport PYTHON_VERSION=\"${{ matrix.python-version\
        \ }}\"\nexport FFMPEG_VERSION=\"${{ matrix.ffmpeg-version }}\"\nexport PIP_PROGRESS_BAR=off\n\
        export CONDA_QUIET=1\nexport CU_VERSION=\"\"\nexport USE_OPENMP=\"0\"\n\n\
        # Set CHANNEL\nif [[(${GITHUB_EVENT_NAME} = 'pull_request' && (${GITHUB_BASE_REF}\
        \ = 'release'*)) || (${GITHUB_REF} = 'refs/heads/release'*) ]]; then\n  export\
        \ UPLOAD_CHANNEL=test\nelse\n  export UPLOAD_CHANNEL=nightly\nfi\n\necho \"\
        ::group::Create conda environment\"\n# Mark Build Directory Safe\ngit config\
        \ --global --add safe.directory /__w/audio/audio\nconda create -c conda-forge\
        \ --strict-channel-priority -y -n ci_env python=\"${PYTHON_VERSION}\" ffmpeg=\"\
        ${FFMPEG_VERSION}\" cmake ninja\nconda activate ci_env\nconda info\nffmpeg\
        \ -version\npython -m pip install --upgrade pip\necho \"::endgroup::\"\n\n\
        echo \"::group::Install TorchAudio test and PyTorch dependencies\"\npython\
        \ -m pip install parameterized requests coverage pytest pytest-cov scipy numpy\
        \ expecttest\necho \"::endgroup::\"\n\necho \"::group::Install PyTorch and\
        \ TorchCodec\"\nPYTORCH_WHEEL_INDEX=\"https://download.pytorch.org/whl/${UPLOAD_CHANNEL}/cpu\"\
        \npython -m pip install --pre torch torchcodec --index-url=\"${PYTORCH_WHEEL_INDEX}\"\
        \npython -c 'import torch; print(f\"{torch.__version__}\"); print(f\"{torch.__file__}\"\
        )'\npython -c 'import torchcodec; print(f\"{torchcodec.__version__}\"); print(f\"\
        {torchcodec.__file__}\")'\necho \"::endgroup::\"\n\necho \"::group::Build\
        \ and install TorchAudio\"\nexport BUILD_CPP_TEST=1\npython -m pip install\
        \ . -v --no-build-isolation\necho \"::endgroup::\"\n\necho \"::group::Run\
        \ TorchAudio C tests\"\n(cd build/temp*/test/cpp && ./wall_collision)\necho\
        \ \"::endgroup::\"\n\necho \"::group::Run TorchAudio tests\"\nexport TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_APPLY_CMVN_SLIDING=true\n\
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_COMPUTE_FBANK_FEATS=true\nexport\
        \ TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_COMPUTE_KALDI_PITCH_FEATS=true\nexport\
        \ TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_COMPUTE_MFCC_FEATS=true\nexport TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CMD_COMPUTE_SPECTROGRAM_FEATS=true\n\
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CUDA=true\nexport TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_HW_ACCEL=true\n\
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_QUANTIZATION=true\nexport TORCHAUDIO_TEST_ALLOW_SKIP_IF_ON_PYTHON_310=true\n\
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_MOD_sentencepiece=true\nexport TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_AUDIO_OUT_DEVICE=true\n\
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_TEMPORARY_DISABLED=true\nexport TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_SOX_DECODER=true\n\
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_SOX_ENCODER=true\nexport TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_CTC_DECODER=true\n\
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_MOD_unidecode=true\nexport TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_MOD_inflect=true\n\
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_MOD_pytorch_lightning=true\n\npytest\
        \ test/torchaudio_unittest -k \"not torchscript and not fairseq and not demucs\
        \ and not librosa\" -x\necho \"::endgroup::\"\n"
      timeout: 180
