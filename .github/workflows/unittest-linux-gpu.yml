name: Unit-tests on Linux GPU
on:
  push:
    branches:
      - main

jobs:
  build:
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        cuda-version: ['12.6']
        ffmpeg-version: ['7']
        python-version: ['3.11']
    uses: pytorch/test-infra/.github/workflows/linux_job_v2.yml@main
    with:
      gpu-arch-type: cuda
      gpu-arch-version: ${{ matrix.cuda-version }}
      job-name: Run tests
      repository: pytorch/audio
      runner: linux.g5.4xlarge.nvidia.gpu
      script: |
        set -ex
        export PYTHON_VERSION="${{ matrix.python-version }}"
        export FFMPEG_VERSION="${{ matrix.ffmpeg-version }}"
        export CU_VERSION_WITHOUT_PERIODS="$(echo "${{ matrix.cuda-version }}" | sed 's/\.//g')"
        export PIP_PROGRESS_BAR=off
        export CONDA_QUIET=1

        # TorchAudio test skips
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_CUDA_SMALL_MEMORY=true
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_ON_PYTHON_310=true
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_TEMPORARY_DISABLED=true
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_SOX_DECODER=true
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_SOX_ENCODER=true
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_FFMPEG=true
        export TORCHAUDIO_TEST_ALLOW_SKIP_IF_NO_MOD_demucs=true
        export CUBLAS_WORKSPACE_CONFIG=:16:8

        # Set UPLOAD_CHANNEL
        if [[ (${GITHUB_EVENT_NAME} = 'pull_request' && (${GITHUB_BASE_REF} = 'release'*)) || (${GITHUB_REF} = 'refs/heads/release'*) ]]; then
          export UPLOAD_CHANNEL=test
        else
          export UPLOAD_CHANNEL=nightly
        fi

        echo "::group::Create conda env"
        git config --global --add safe.directory /__w/audio/audio
        conda create -c conda-forge --strict-channel-priority -y --prefix ci_env python="${PYTHON_VERSION}" ffmpeg="${FFMPEG_VERSION}" cmake ninja
        conda activate ./ci_env
        conda info
        python -m pip install --upgrade pip
        echo "::endgroup::"

        echo "::group::Install PyTorch and TorchCodec"
        PYTORCH_WHEEL_INDEX="https://download.pytorch.org/whl/${UPLOAD_CHANNEL}/cu${CU_VERSION_WITHOUT_PERIODS}"
        python -m pip install numpy
        python -m pip install --pre torch torchcodec --index-url="${PYTORCH_WHEEL_INDEX}"
        python -c 'import torch; print(f"{torch.__version__} {torch.__file__} {torch.cuda.is_available()}")'
        echo "::endgroup::"

        echo "::group::Build and install TorchAudio"
        python -m pip install . -v --no-build-isolation
        echo "::endgroup::"

        echo "::group::Install Python Dependencies"
        python -m pip install parameterized requests coverage pytest pytest-cov scipy expecttest
        echo "::endgroup::"

        echo "::group::Run tests"
        declare -a args=(
            '-v'
            '--cov=torchaudio'
            "--junitxml=${RUNNER_TEST_RESULTS_DIR}/junit.xml"
            '--durations' '100'
            '-k' '(cuda or gpu) and not (torchscript and rnnt) and not torchscript_consistency'
            '-x'
        )
        cd test
        python3 -m torch.utils.collect_env
        env | grep TORCHAUDIO || true
        pytest "${args[@]}" torchaudio_unittest
        coverage html
        echo "::endgroup::"

    steps:
      - name: Start Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: start-measurement

      - name: Run Tests
        run: echo "Tests executed via linux_job_v2.yml script"

      - id: record-measurement
        name: Record Energy Measurement
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          label: "Post Test Measurement"
          task: get-measurement

      - id: display-measurement
        name: Display Energy Results
        uses: green-coding-solutions/eco-ci-energy-estimation@862050e4f01f65b1436e5eca18ba4bd85562f0de
        with:
          json-output: true
          task: display-results

      - name: Save Total Energy Consumption Data
        run: echo '${{ steps.record-measurement.outputs.data-total-json }}' > total_energy_consumption.json

      - name: Upload Energy Consumption Artifact
        uses: actions/upload-artifact@v4
        with:
          name: total-energy-consumption
          path: total_energy_consumption.json
